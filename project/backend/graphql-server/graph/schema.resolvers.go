package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.73

import (
	"context"
	"fmt"
	"mindmap-backend/graphql-server/graph/model"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, user model.User) (*model.UserOutput, error) {
	panic(fmt.Errorf("not implemented: CreateUser - createUser"))
}

// CreateProject is the resolver for the createProject field.
func (r *mutationResolver) CreateProject(ctx context.Context, project model.Project) (*model.ProjectInfoOutput, error) {
	panic(fmt.Errorf("not implemented: CreateProject - createProject"))
}

// UpdateProjectName is the resolver for the updateProjectName field.
func (r *mutationResolver) UpdateProjectName(ctx context.Context, projectID string, project model.Project) (*model.ProjectInfoOutput, error) {
	panic(fmt.Errorf("not implemented: UpdateProjectName - updateProjectName"))
}

// DeleteProject is the resolver for the deleteProject field.
func (r *mutationResolver) DeleteProject(ctx context.Context, projectID string) (*model.ProjectInfoOutput, error) {
	panic(fmt.Errorf("not implemented: DeleteProject - deleteProject"))
}

// CreateNode is the resolver for the createNode field.
func (r *mutationResolver) CreateNode(ctx context.Context, node model.Node) (*model.NodeOutput, error) {
	panic(fmt.Errorf("not implemented: CreateNode - createNode"))
}

// UpdateNode is the resolver for the updateNode field.
func (r *mutationResolver) UpdateNode(ctx context.Context, node *model.Node, styles []*model.Style) (*model.NodeOutput, error) {
	panic(fmt.Errorf("not implemented: UpdateNode - updateNode"))
}

// DeleteNode is the resolver for the deleteNode field.
func (r *mutationResolver) DeleteNode(ctx context.Context, nodeID string) (*model.NodeOutput, error) {
	panic(fmt.Errorf("not implemented: DeleteNode - deleteNode"))
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, user *model.User) (*model.UserOutput, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}

// Project is the resolver for the project field.
func (r *queryResolver) Project(ctx context.Context, projectID string) (*model.ProjectInfoOutput, error) {
	panic(fmt.Errorf("not implemented: Project - project"))
}

// Projects is the resolver for the projects field.
func (r *queryResolver) Projects(ctx context.Context, userID string) (*model.ProjectInfoConnection, error) {
	panic(fmt.Errorf("not implemented: Projects - projects"))
}

// Node is the resolver for the node field.
func (r *queryResolver) Node(ctx context.Context, nodeID string) (*model.NodeOutput, error) {
	panic(fmt.Errorf("not implemented: Node - node"))
}

// Nodes is the resolver for the nodes field.
func (r *queryResolver) Nodes(ctx context.Context, projectID string, first *int32, after *string) (*model.NodeLevelConnection, error) {
	panic(fmt.Errorf("not implemented: Nodes - nodes"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//  - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//    it when you're done.
//  - You have helper methods in this file. Move them out to keep these resolver files clean.
/*
	func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	panic(fmt.Errorf("not implemented: CreateTodo - createTodo"))
}
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	panic(fmt.Errorf("not implemented: Todos - todos"))
}
*/
